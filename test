#include <iostream>
#include <vector>
#include <map>

class MyClass {
private:
    std::vector<std::map<int, std::string> > vector_de_maps;

public:
    // Setter para el vector de maps
    void setVectorDeMaps(const std::vector<std::map<int, std::string> >& nuevo_vector) {
        vector_de_maps = nuevo_vector;
    }

    // Getter para el vector de maps
    const std::vector<std::map<int, std::string> >& getVectorDeMaps() const {
        return vector_de_maps;
    }
};

int main() {
    MyClass objeto;

    // Crear un vector de maps
    std::vector<std::map<int, std::string> > nuevo_vector;

    // Crear un map y guardarlo en el vector
    std::map<int, std::string> map1;
    map1[1] = "Uno";
    map1[2] = "Dos";
    nuevo_vector.push_back(map1);

    // Crear otro map y guardarlo en el vector
    std::map<int, std::string> map2;
    map2[3] = "Tres";
    map2[4] = "Cuatro";
    nuevo_vector.push_back(map2);

    // Usar el setter para asignar el nuevo vector de maps al objeto
    objeto.setVectorDeMaps(nuevo_vector);

    // Usar el getter para obtener el vector de maps desde el objeto
    const std::vector<std::map<int, std::string> >& vector_obtenido = objeto.getVectorDeMaps();

    // Acceder a los maps dentro del vector y mostrar su contenido
    for (size_t i = 0; i < vector_obtenido.size(); ++i) {
        std::cout << "Map " << i + 1 << ":\n";
        std::map<int, std::string> mapa_actual = vector_obtenido[i];
        for (std::map<int, std::string>::iterator it = mapa_actual.begin(); it != mapa_actual.end(); ++it) {
            std::cout << it->first << ": " << it->second << std::endl;
        }
        std::cout << std::endl;
    }

    return 0;
}

